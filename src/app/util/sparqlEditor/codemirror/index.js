import { LRParser } from '@lezer/lr';
import { styleTags, tags } from '@lezer/highlight';
import { syntaxHighlighting, HighlightStyle, LRLanguage, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';

const base02 = '#606f7a',
  base03 = '#707d8b',
  base05 = '#bdbdbd',
  base_red = '#ff5f52',
  base_deeporange = '#ff6e40',
  base_pink = '#fa5788',
  base_yellow = '#facf4e',
  base_orange = '#ffad42',
  base_cyan = '#56c8d8',
  base_indigo = '#7186f0',
  base_purple = '#cf6edf',
  base_green = '#6abf69',
  base_lightgreen = '#99d066';

const invalid = base_red;

const tokens = {
  BASE : 1,
  PREFIX : 2,
  SELECT : 3,
  CONSTRUCT : 4,
  DESCRIBE : 5,
  WHERE : 6,
  DISTINCT : 7,
  REDUCED : 8,
  STR : 9,
  LANG : 10,
  LANGMATCHES : 11,
  DATATYPE : 12,
  ASK : 13,
  BOUND : 14,
  IRI : 15,
  URI : 16,
  BNODE : 17,
  RAND : 18,
  ABS : 19,
  CEIL : 20,
  FLOOR : 21,
  ROUND : 22,
  CONCAT : 23,
  STRLEN : 24,
  UCASE : 25,
  LCASE : 26,
  ENCODE_FOR_URI : 27,
  CONTAINS : 28,
  STRSTARTS : 29,
  STRENDS : 30,
  STRBEFORE : 31,
  STRAFTER : 32,
  YEAR : 33,
  MONTH : 34,
  DAY : 35,
  HOURS : 36,
  MINUTES : 37,
  SECONDS : 38,
  TIMEZONE : 39,
  TZ : 40,
  NOW : 41,
  UUID : 42,
  STRUUID : 43,
  MD5 : 44,
  SHA1 : 45,
  SHA256 : 46,
  SHA384 : 47,
  SHA512 : 48,
  COALESCE : 49,
  IF : 50,
  STRLANG : 51,
  STRDT : 52,
  SAMETERM : 53,
  ISIRI : 54,
  ISURI : 55,
  ISBLANK : 56,
  ISLITERAL : 57,
  ISNUMERIC : 58,
  COUNT : 59,
  SUM : 60,
  MIN : 61,
  MAX : 62,
  AVG : 63,
  SAMPLE : 64,
  GROUP_CONCAT : 65,
  SEPARATOR : 66,
  SUBSTR : 67,
  REPLACE : 68,
  REGEX : 69,
  EXISTS : 70,
  NOT : 71,
  IN : 72,
  GROUP : 73,
  BY : 74,
  HAVING : 75,
  ORDER : 76,
  ASC : 77,
  DESC : 78,
  LIMIT : 79,
  OFFSET : 80,
  VALUES : 81,
  UNDEF : 82,
  UNION : 83,
  OPTIONAL : 84,
  MINUS : 85,
  GRAPH : 86,
  SERVICE : 87,
  SILENT : 88,
  FILTER : 89,
  BIND : 90,
  AS : 91,
  FROM : 92,
  NAMED : 93,
  TRUE : 94,
  FALSE : 95,
  LOAD : 96,
  INTO : 97,
  TO : 98,
  CLEAR : 99,
  DROP : 100,
  CREATE : 101,
  ADD : 102,
  MOVE : 103,
  COPY : 104,
  INSERT : 105,
  DATA : 106,
  DELETE : 107,
  WITH : 108,
  DEFAULT : 109,
  ALL : 110,
  USING : 111,
  SIMILARITY : 112,
  JOIN : 113,
  ON : 114,
  TOP : 115,
  WITHIN : 116,
  DISTANCE : 117,
  CLUSTER : 118,
  Comment : 119,
  Unit : 120,
  Query : 121,
  Prologue : 122,
  BaseDecl : 123,
  IriRef : 124,
  PrefixDecl : 125,
  Pname_ns : 126,
  SelectQuery : 127,
  SelectClause : 128,
  Var : 129,
  Expression : 130,
  ConditionalOrExpression : 131,
  ConditionalAndExpression : 132,
  ValueLogical : 133,
  RelationalExpression : 134,
  NumericExpression : 135,
  AdditiveExpression : 136,
  MultiplicativeExpression : 137,
  UnaryExpression : 138,
  PrimaryExpression : 139,
  BrackettedExpression : 140,
  BuiltInCall : 141,
  Aggregate : 142,
  String : 144,
  Nil : 146,
  ExpressionList : 147,
  SubstringExpression : 148,
  StrReplaceExpression : 149,
  RegexExpression : 150,
  ExistsFunc : 151,
  GroupGraphPattern : 152,
  SubSelect : 153,
  WhereClause : 154,
  SolutionModifier : 155,
  ClusterClause : 156,
  WithClause : 157,
  Params : 158,
  TriplesBlock : 159,
  TriplesSameSubjectPath : 160,
  VarOrTerm : 161,
  GraphTerm : 162,
  Iri : 163,
  PrefixedName : 164,
  Pname_ln : 165,
  RDFLiteral : 166,
  Langtag : 167,
  NumericLiteral : 169,
  NumericLiteralUnsigned : 170,
  Integer : 171,
  Decimal : 172,
  Double : 173,
  NumericLiteralPositive : 174,
  IntegerPositive : 175,
  DecimalPositive : 176,
  DoublePositive : 177,
  NumericLiteralNegative : 178,
  IntegerNegative : 179,
  DecimalNegative : 180,
  DoubleNegative : 181,
  BooleanLiteral : 182,
  BlankNode : 183,
  Blank_node_label : 184,
  Anon : 185,
  PropertyListPathNotEmpty : 186,
  VerbPath : 187,
  Path : 188,
  PathAlternative : 189,
  PathSequence : 190,
  PathEltOrInverse : 191,
  PathElt : 192,
  PathPrimary : 193,
  PathNegatedPropertySet : 194,
  PathOneInPropertySet : 195,
  PathMod : 196,
  VerbSimple : 197,
  ObjectListPath : 198,
  ObjectPath : 199,
  GraphNodePath : 200,
  TriplesNodePath : 201,
  CollectionPath : 202,
  BlankNodePropertyListPath : 205,
  ObjectList : 206,
  Object : 207,
  GraphNode : 208,
  TriplesNode : 209,
  Collection : 210,
  BlankNodePropertyList : 211,
  PropertyListNotEmpty : 212,
  Verb : 213,
  VarOrIri : 214,
  PropertyListPath : 215,
  GroupClause : 217,
  GroupCondition : 218,
  FunctionCall : 219,
  ArgList : 220,
  HavingClause : 221,
  HavingCondition : 222,
  Constraint : 223,
  OrderClause : 224,
  OrderCondition : 225,
  LimitOffsetClauses : 226,
  LimitClause : 227,
  OffsetClause : 228,
  ValuesClause : 229,
  DataBlock : 230,
  InlineDataOneVar : 231,
  DataBlockValue : 232,
  InlineDataFull : 233,
  GroupGraphPatternSub : 234,
  GraphPatternNotTriples : 235,
  GroupOrUnionGraphPattern : 236,
  OptionalGraphPattern : 237,
  MinusGraphPattern : 238,
  GraphGraphPattern : 239,
  ServiceGraphPattern : 240,
  Filter : 241,
  Bind : 242,
  InlineData : 243,
  SimJoinPattern : 244,
  NotExistsFunc : 245,
  IriOrFunction : 246,
  DatasetClause : 247,
  DefaultGraphClause : 248,
  SourceSelector : 249,
  NamedGraphClause : 250,
  ConstructQuery : 251,
  ConstructTemplate : 252,
  ConstructTriples : 253,
  TriplesSameSubject : 254,
  PropertyList : 255,
  TriplesTemplate : 256,
  DescribeQuery : 257,
  AskQuery : 258,
  Update : 259,
  Update1 : 260,
  Load : 261,
  GraphRef : 262,
  Clear : 263,
  GraphRefAll : 264,
  Drop : 265,
  Add : 266,
  GraphOrDefault : 267,
  Move : 268,
  Copy : 269,
  Create : 270,
  InsertData : 271,
  QuadData : 272,
  Quads : 273,
  QuadsNotTriples : 274,
  DeleteData : 275,
  DeleteWhere : 276,
  QuadPattern : 277,
  Modify : 278,
  DeleteClause : 279,
  InsertClause : 280,
  UsingClause : 281,
  Keyword : 282
};

const highlight =styleTags({
        Comment: tags.comment,
        "BASE PREFIX SELECT CONSTRUCT DESCRIBE WHERE DISTINCT REDUCED STR LANG LANGMATCHES DATATYPE ASK BOUND IRI URI BNODE RAND ABS CEIL FLOOR ROUND CONCAT STRLEN UCASE LCASE ENCODE_FOR_URI CONTAINS STRSTARTS STRENDS STRBEFORE STRAFTER YEAR MONTH DAY HOURS MINUTES SECONDS TIMEZONE TZ NOW UUID STRUUID MD5 SHA1 SHA256 SHA384 SHA512 COALESCE IF STRLANG STRDT SAMETERM ISIRI ISURI ISBLANK ISLITERAL ISNUMERIC COUNT SUM MIN MAX AVG SAMPLE GROUP_CONCAT SEPARATOR SUBSTR REPLACE REGEX EXISTS NOT IN GROUP BY HAVING ORDER ASC DESC LIMIT OFFSET VALUES UNDEF UNION OPTIONAL MINUS GRAPH SERVICE SILENT FILTER BIND AS FROM NAMED LOAD INTO TO CLEAR DROP CREATE ADD MOVE COPY INSERT DATA DELETE WITH DEFAULT ALL USING SIMILARITY JOIN ON TOP WITHIN DISTANCE CLUSTER": tags.keyword,
        "Var ObjectListPath/..": tags.variableName,
        String: tags.string,
        Integer: tags.integer,
        "Double Decimal": tags.float,
        "{ }": tags.brace,
        Langstag: tags.annotation,
        "TRUE FALSE": tags.bool,
				"VerbPath Namespace IriRef": tags.namespace,
				"Iri": tags.url,
				"RDFLiteral/Iri": tags.typeName,
      });
syntaxHighlighting(
  HighlightStyle.define(
    [
  { tag: tags.keyword, color: base_purple },
  {
    tag: [tags.name, tags.deleted, tags.character, tags.macroName],
    color: base_cyan
  },
  { tag: [tags.propertyName], color: base_yellow },
  { tag: [tags.variableName], color: base05 },
  { tag: [tags.function(tags.variableName)], color: base_cyan },
  { tag: [tags.labelName], color: base_purple },
  {
    tag: [tags.color, tags.constant(tags.name), tags.standard(tags.name)],
    color: base_yellow
  },
  { tag: [tags.definition(tags.name), tags.separator], color: base_pink },
  { tag: [tags.brace], color: base_purple },
  {
    tag: [tags.annotation],
    color: invalid
  },
  {
    tag: [tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: base_orange
  },
  {
    tag: [tags.typeName, tags.className],
    color: base_orange
  },
  {
    tag: [tags.operator, tags.operatorKeyword],
    color: base_indigo
  },
  {
    tag: [tags.tagName],
    color: base_deeporange
  },
  {
    tag: [tags.squareBracket],
    color: base_red
  },
  {
    tag: [tags.angleBracket],
    color: base02
  },
  {
    tag: [tags.attributeName],
    color: base05
  },
  {
    tag: [tags.regexp],
    color: invalid
  },
  {
    tag: [tags.quote],
    color: base_green
  },
  { tag: [tags.string], color: base_lightgreen },
  {
    tag: tags.link,
    color: base_cyan,
    textDecoration: 'underline',
    textUnderlinePosition: 'under'
  },
  {
    tag: [tags.url, tags.escape, tags.special(tags.string)],
    color: base_yellow
  },
  { tag: [tags.meta], color: base03 },
  { tag: [tags.comment], color: base03, fontStyle: 'italic' },
  { tag: tags.monospace, color: base05 },
  { tag: tags.strong, fontWeight: 'bold', color: base_red },
  { tag: tags.emphasis, fontStyle: 'italic', color: base_lightgreen },
  { tag: tags.strikethrough, textDecoration: 'line-through' },
  { tag: tags.heading, fontWeight: 'bold', color: base_yellow },
  { tag: tags.heading1, fontWeight: 'bold', color: base_yellow },
  {
    tag: [tags.heading2, tags.heading3, tags.heading4],
    fontWeight: 'bold',
    color: base_yellow
  },
  {
    tag: [tags.heading5, tags.heading6],
    color: base_yellow
  },
  { tag: [tags.atom, tags.bool, tags.special(tags.variableName)], color: base_cyan },
  {
    tag: [tags.processingInstruction, tags.inserted],
    color: base_red
  },
  {
    tag: [tags.contentSeparator],
    color: base_cyan
  },
  { tag: tags.invalid, color: base02, borderBottom: `1px dotted ${base_red}` }
],
    { all: { color: "#585858" } }
  )
);

const caseInsensitive = (value, stack) => {
  return tokens[value.toUpperCase()] || -1;
};

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "!EWO!TQPOOP!eOPOOO!jQPO'#E{O!oQPO'#E}OOQO'#Id'#IdO!tQPO'#EzO$pQPO'#HyQOQPOOPOOO'#Ic'#IcP%QOPO)CDxOOQO,5;g,5;gO%XQPO,5;iOOQO-E<b-E<bO%^QPO'#FQO%oQPO'#FPO%zQPO'#HqO&VQPO'#HwO%oQPO'#HxO&hQPO,5;eO&pQPO'#H{O'OQPO'#H}O'aQPO'#IPO(TQPO'#IQO([QPO'#ISO(cQPO'#ITO(jQPO'#IUO(rQPO'#I`O(zQPO'#I_O)VQPO'#I^O)bQPO'#I^O&sQPO'#I^OOQO'#Hz'#HzO)jQPO,5>ePOOO-E<a-E<aOOQO1G1T1G1TOOQO'#Ie'#IeO)rQPO'#IeO/[QPO,5;lOOQO,5;l,5;lO/mQPO,5;lOOQO'#Fl'#FlO%uQPO'#FlO1fQPO'#FjO2]QPO'#HmOOQO'#I}'#I}O%oQPO,5;kO2kQPO,5;kO3VQPO,5>]O4{QPO'#HrO%oQPO,5>]O5SQPO,5>]OOQO'#Fr'#FrOOQO'#Fq'#FqOOQO'#H_'#H_OOQO'#JO'#JOO5XQPO,5>cO5rQPO,5>cO%oQPO,5>dO2kQPO,5>dO6PQPO'#GSOOQO1G1P1G1PO6[QPO,5>gO&sQPO,5>gO&sQPO'#H|OOQO'#IO'#IOOOQO,5>i,5>iO6gQPO,5>iOOQO,5>k,5>kO6gQPO,5>kOOQO'#IR'#IRO&sQPO'#IRO6uQPO,5>lO'rQPO,5>lO6zQPO,5>nO'rQPO,5>nO7PQPO,5>oO'rQPO,5>oOOQO,5>p,5>pO7UQPO,5>pO7ZQPO,5>qO7`QPO'#I]OOQO,5>z,5>zO7ZQPO,5>uO(uQPO,5>vOOQO,5>y,5>yO(uQPO'#I`O7jQPO'#IaOOQO'#JQ'#JQO7xQPO,5>xO%uQPO,5>xO7xQPO,5>xO8QQPO,5>xOYQPO1G4PO)rQPO'#F^OOQO'#Fb'#FbO8YQPO'#F`O8_QPO'#F`O8dQPO'#F`O8iQPO'#FfO8nQPO'#FgO8sQPO'#FhO:SQQO'#FpO;zQQO'#GWOOQO'#G['#G[OOQO'#G_'#G_OOQO'#Gc'#GcOOQO'#GZ'#GZOOQO'#Gg'#GgO%uQPO'#FiO<hQPO'#HlOOQO'#F_'#F_O<mQPO'#F_O<rQPO'#F_O<wQPO'#F_O<|QPO'#F_O=UQPO'#F_O=ZQPO'#F_O=cQPO'#F_OOQO'#F]'#F]O=hQPO'#F[OOQO'#F['#F[OCuQQO'#FZOEaQQO'#FYOOQO'#FX'#FXOFTQQO'#FWOOQO'#FV'#FVOGRQPO'#FUOGgQPO'#FTOOQO'#FS'#FSOGxQPO,5?POOQO-E<c-E<cOG}QPO1G1WOOQO1G1W1G1WOOQO,5<W,5<WOH`QPO'#GWOJnQPO'#FkOOQO'#Gn'#GnOOQO'#Gm'#GmOOQO'#Gl'#GlO/xQPO'#HROJvQPO'#HUOOQO'#HQ'#HQOJvQPO'#GkOKbQPO'#GkOLXQPO'#GjOL|QPO'#HcO%uQPO'#HdO%uQPO'#HeO! `QPO'#HfO! nQPO'#HgO!!PQPO'#HhO!&^QPO'#HiO6PQPO'#HjO!&cQPO'#HkOOQO'#Hb'#HbO!&hQPO'#IwO!'_QPO'#GiO!'_QPO'#GiO!(PQPO,5<UOOQO'#Ho'#HoOOQO'#Hn'#HnO&sQPO'#HpOOQO,5>X,5>XOOQO-E<{-E<{O2kQPO1G1VO!(UQPO'#FnO!(ZQPO'#FvO!!PQPO'#FyO!(`QPO'#F|O!(eQPO'#GPO!(eQPO'#GRO!(jQPO'#GOO!(xQPO'#GOOOQO'#Fm'#FmO!)WQPO'#FmO!)iQPO'#FmO!)pQPO'#FmO!)zQPO'#FmOOQO1G1V1G1VO!*XQPO1G3wO3_QPO'#HZO!*^QPO'#H[OOQO'#HY'#HYO!*^QPO'#HtO!*oQPO'#HtO!*|QPO'#HsOOQO,5>^,5>^O!+UQPO,5>^O%oQPO1G3wO2kQPO1G3wO!+ZQPO1G3wO5rQPO1G3}OOQO-E<|-E<|OOQO1G3}1G3}O2kQPO1G3}O2kQPO1G4OOOQO1G4O1G4OO!+bQPO'#GUO!+gQPO'#GhO!+lQPO'#GhOOQO'#GT'#GTOOQO,5<n,5<nO7UQPO1G4RO!+tQPO1G4ROOQO,5>h,5>hOOQO1G4T1G4TOOQO1G4V1G4VOOQO,5>m,5>mO'rQPO1G4WO!,PQPO1G4WO'rQPO1G4YO!,UQPO1G4YO'rQPO1G4ZO!,ZQPO1G4ZOOQO1G4[1G4[O7`QPO'#IWOOQO1G4]1G4]O!,`QPO'#HvO! `QPO'#IYO!,kQPO'#JPO!,xQPO'#IXO!,xQPO'#IXO!-QQPO,5>wOOQO1G4a1G4aOOQO1G4b1G4bOOQO,5>{,5>{O&sQPO,5>{OOQO-E=O-E=OO%uQPO1G4dOOQO1G4d1G4dO!-VQPO1G4dO(uQPO'#I_O!-_QPO1G4dO!-VQPO1G4dO#{QPO'#HyOOQO7+)k7+)kO!-jQPO,5;xO!-oQPO,5;zO!-yQPO,5;zO!.QQPO,5;zO)rQPO,5<QO)rQPO,5<RO)rQPO,5<SOOQO'#Ft'#FtO!.XQPO'#FtOOQO,5<[,5<[OOQO,5<r,5<rO&sQPO,5<rOOQO,5<T,5<TO%uQPO,5>WO)rQPO,5;yO)rQPO,5;yO!.`QPO,5;yOOQO,5;y,5;yOOQO'#Fe'#FeO)rQPO'#FeO)rQPO,5;yOOQO,5;v,5;vO)rQPO'#IyO!/cQQO,5;uO)rQPO'#IzO!1TQQO'#IzO!2oQQO,5;tO!3cQPO,5;rO=ZQPO,5;rO!3pQPO,5;rO)rQPO'#I{O!3uQPO,5;pO)rQPO'#I|O!4ZQPO,5;oO!4lQPO1G4kO!5YQPO,5<VOOQO'#Iq'#IqO!5aQPO,5=mOOQO'#HP'#HPOOQO'#Gx'#GxO!5yQPO'#GxO!6QQPO'#GxO!6iQSO'#GwOOQO'#Gv'#GvO!8iQPO'#GvO!8}QSO'#GuO!:tQSO'#GtOOQO'#Gs'#GsOOQO'#Gr'#GrOOQO'#G|'#G|O!<hQPO,5=pO/xQPO'#GqOOQO,5=V,5=VOOQO'#H`'#H`O!<mQPO,5=UO%uQPO'#IxO!=aQPO,5=}OOQO,5>O,5>OOOQO,5>P,5>PO%uQPO,5>QO%uQPO,5>RO! `QPO,5>RO!?sQPO'#FxOOQO'#F{'#F{OOQO,5>S,5>SO)rQPO,5>TOOQO,5>U,5>UO!?{QPO,5>VOOQO,5?c,5?cO!@QQPO,5?cOOQO-E<u-E<uO!@tQPO,5=TOOQO1G1p1G1pOOQO,5>[,5>[OOQO7+&q7+&qO!AfQPO,5<YO!AkQPO,5<bOOQO'#Fz'#FzOOQO'#Ii'#IiO!E{QPO,5<eO!FcQPO,5<hOOQO'#Ik'#IkO!FpQPO,5<kO!GRQPO,5<mOOQO,5<j,5<jOOQO,5<X,5<XO!GdQPO,5<XO!GuQPO,5<XO!G|QPO,5<XO!HWQPO7+)cOOQO'#It'#ItO!H_QPO,5=uOOQO'#HX'#HXOOQO'#H^'#H^O3_QPO'#H]O!HfQPO,5=vOOQO,5>`,5>`OOQO'#Hu'#HuO!HkQPO,5>_OOQO1G3x1G3xO2kQPO7+)cOOQO7+)c7+)cO!HrQPO7+)cOOQO7+)i7+)iO2kQPO7+)iOOQO7+)j7+)jO!JUQPO,5<pO!J]QPO,5=SOOQO'#Ig'#IgO!JhQPO,5=SO!JpQPO,5=SOOQO7+)m7+)mO7UQPO7+)mOOQO7+)r7+)rO'rQPO7+)rOOQO7+)t7+)tO'rQPO7+)tOOQO7+)u7+)uO'rQPO7+)uO!JuQPO,5>rO!JzQPO,5>bO!KUQPO,5>tOOQO,5?k,5?kO!KZQPO,5?kOOQO-E<}-E<}O!KeQPO,5>sOOQO1G4c1G4cOOQO1G4g1G4gOOQO7+*O7+*OO%uQPO7+*OO!KmQPO7+*OO!KmQPO7+*OOOQO1G1d1G1dO!KuQPO1G1fO!KzQPO1G1fO)rQPO1G1fO!LRQPO1G1fO)rQPO1G1fO!LZQPO1G1lO!L`QPO1G1mO!LeQPO1G1nO!LjQPO,5<`O)rQPO,5<`OOQO1G2^1G2^OOQO1G3r1G3rO!LrQPO1G1eO!LwQPO1G1eO!L|QPO,5<PO!MUQPO1G1eOOQO,5?e,5?eOOQO-E<w-E<wOOQO,5?f,5?fO!NXQQO,5?fOOQO-E<x-E<xO8xQPO'#FpO!N{QPO'#FZO# VQPO'#FYOOQO1G1^1G1^O=ZQPO1G1^OOQO,5?g,5?gOOQO-E<y-E<yOOQO,5?h,5?hOOQO-E<z-E<zO# aQPO7+*VO# fQPO1G1qOOQO-E<o-E<oOOQO1G3X1G3XOOQO'#Gz'#GzO# nQPO'#GzOOQO'#Gy'#GyO# |QPO'#GyOOQO,5=d,5=dO#!TQPO,5=dOOQO'#G{'#G{OOQO,5=c,5=cOOQO,5=b,5=bO!6QQPO'#IoO#!YQSO,5=aO!6QQPO'#IpO#$PQSO,5=`OOQO1G3[1G3[OOQO'#HO'#HOO#%sQPO'#G}O#&qQPO,5=]OOQO1G2p1G2pOOQO,5?d,5?dOOQO-E<v-E<vOOQO1G3l1G3lOOQO1G3m1G3mO%uQPO1G3mOOQO,5<d,5<dO#'lQPO1G3oO#'qQPO1G3qOOQO1G4}1G4}O#'vQPO1G1tOOQO'#Fw'#FwO)rQPO'#FwOOQO'#Ih'#IhO#(OQPO1G1|OOQO-E<g-E<gO!&XQPO'#F}OOQO'#F}'#F}OOQO'#Ij'#IjO#(iQPO1G2SOOQO-E<i-E<iOOQO1G1s1G1sO#)VQPO1G1sO#)hQPO1G1sO2kQPO<<L}O#)oQPO<<L}OOQO-E<r-E<rOOQO1G3a1G3aO#)tQPO,5=wOOQO'#HW'#HWO#*VQPO'#HVOOQO1G3b1G3bOOQO1G3y1G3yOOQO<<L}<<L}OOQO<<MT<<MTOOQO'#GV'#GVOOQO'#Il'#IlO#+TQPO1G2[OOQO1G2[1G2[O#+[QPO'#ImOOQO'#Im'#ImO#+cQPO1G2nOOQO1G2n1G2nOOQO-E<e-E<eO#+nQPO1G2nO#+cQPO1G2nOOQO<<MX<<MXOOQO<<M^<<M^OOQO<<M`<<M`OOQO<<Ma<<MaOOQO1G4^1G4^OOQO1G3|1G3|O#+sQPO1G4`OOQO1G5V1G5VOOQO<<Mj<<MjO%uQPO<<MjO#+zQPO<<MjOOQO7+'Q7+'QO#,SQPO7+'QO#,XQPO7+'QO#,^QPO7+'QO)rQPO7+'WO)rQPO7+'XO)rQPO7+'YO)rQPO'#IfO#,fQPO1G1zOOQO1G1z1G1zO#,fQPO1G1zOOQO7+'P7+'PO)rQPO7+'PO#,nQPO1G1kOOQO1G1k1G1kO)rQPO7+'PO#,vQPO,5;uO#-QQPO'#IzO#-[QPO,5;tOOQO7+&x7+&xOOQO<<Mq<<MqOOQO7+']7+']OOQO,5=f,5=fOOQO,5=e,5=eO#-fQSO,5=eOOQO1G3O1G3OOOQO,5?Z,5?ZOOQO-E<m-E<mOOQO,5?[,5?[OOQO-E<n-E<nO/xQPO'#IrO#-nQPO,5=iO#.lQPO'#IsO#/iQPO1G2wOOQO7+)X7+)XO#0dQPO7+)ZO!AfQPO7+)]O&sQPO'#FoO#0iQPO7+'`O#0nQPO,5<cOOQO-E<f-E<fOOQO,5<i,5<iOOQO-E<h-E<hOOQO7+'_7+'_O#0vQPO7+'_OOQOANBiANBiO2kQPOANBiO#1XQPO'#IuO#1lQPO1G3cO3_QPO'#IvO#1}QPO,5=qOOQO-E<j-E<jOOQO7+'v7+'vO#2{QPO,5?XOOQO,5?X,5?XOOQO-E<k-E<kOOQO7+(Y7+(YO#3SQPO7+(YO#3SQPO7+(YOOQO7+)z7+)zO#3_QPO7+)zOOQOANCUANCUO%uQPOANCUOOQO<<Jl<<JlO#3dQPO<<JlO#3iQPO<<JlO#3nQPO<<JrO#3vQPO<<JsO#3{QPO<<JtOOQO,5?Q,5?QOOQO-E<d-E<dOOQO7+'f7+'fO#4TQPO7+'fO#4]QPO<<JkOOQO7+'V7+'VO#4bQPO<<JkO#4gQPO,5?fO!5hQPO'#InO#4qQSO1G3POOQO1G3P1G3POOQO,5?^,5?^OOQO-E<p-E<pO3_QPO,5?_OOQO-E<q-E<qO#4yQPO<<LuO#5OQPO<<LwOOQO,5<Z,5<ZO#5WQPO'#FuOOQO<<Jz<<JzOOQO1G1}1G1}O#5]QPO1G1}OOQO<<Jy<<JyOOQOG28TG28TO3_QPO,5?aOOQO-E<s-E<sOOQO,5?b,5?bOOQO-E<t-E<tOOQO1G4s1G4sO#5bQPO<<KtOOQO<<Kt<<KtOOQO<<Mf<<MfOOQOG28pG28pO1WQPOAN@WO#5mQPOAN@WOOQOAN@^AN@^O)rQPOAN@^O)rQPOAN@_OOQOAN@`AN@`O)rQPOAN@`OOQO<<KQ<<KQOOQOAN@VAN@VO)rQPOAN@VOOQO,5?Y,5?YOOQO-E<l-E<lOOQO7+(k7+(kOOQO1G4y1G4yOOQOANBaANBaO#5rQPOANBcOOQO,5<a,5<aO#5wQPO7+'iOOQO1G4{1G4{OOQOANA`ANA`O#5|QPOG25rO1WQPOG25rO#6RQPOG25xO#6WQPOG25yO#6`QPOG25zO#6eQPOG25qO!AfQPOG27}OOQO<<KT<<KTOOQOLD+^LD+^O#6jQPOLD+^OOQOLD+dLD+dOOQOLD+eLD+eO)rQPOLD+eOOQOLD+fLD+fOOQOLD+]LD+]O#6oQPOLD-iOOQO!$'Nx!$'NxO#6wQPO!$( PO#6|QPO!$(#TOOQO!)9Dk!)9DkO#7UQPO!)9FoO#7ZQPO!)9FoO#7`QPO!.K<ZO&sQPO!4/1uO#7eQPO!9A'aO#7jQPO!?$J{O%uQPO!D6@gOOQO!IH6R!IH6RO=hQPO'#F[O!3cQPO'#IyO!3cQPO'#Iz",
  stateData: "#8W~O'wOS#kPQ~OPQOQRO#S#nP#V#nP#W#nP#X#nP#Y#nP#Z#nP#[#nP#]#nP#_#nP#`#nP'u#nP~OR#nPS#nPT#nP]#nP~PYO#kWO~O#pYO~O#rZO~OPQOQROR#nXS#nXT#nX]#nX#S#nX#V#nX#W#nX#X#nX#Y#nX#Z#nX#[#nX#]#nX#_#nX#`#nX'u#nX~O#ScO#VdO#WeO#XiO#YfO#ZgO#[hO#]jO#_kO#`nO'u&mX~OR]OS_OT`O]aO~P#{O#kWO~Q'v]#prO~OVwOWwO#usO'xtO'{vO~OUyO#O{O(SzO~OU!SO#O{O(S!QO~O#p!UO#r!TO#u!VO$g!TO'{!YO~O!s!]O'u$vP~O!z!`O#p!UO#r!TO$g!TO~O!x!aO!z!dO#P!bO#a!bO#b!bO~O!x!aO!z!fO#P!bO#a!bO#b!bO~O!x!hO#a!gO#p!UO#r!TO$g!TO~O!z!jO~P'rO!z!lO~P'rO!z!nO~P'rO!x!aO!z!pO~O#^!qO(S!rO~OU!uO#^!tO(S!rO~OU!{O#]!wO#c!xO~OU!{O#c!xO~O$T#OO'u&ma~OX#cOY#cOZ#dO[#cO^#eO_#cO`#cOa#fOb#gOc#cOd#cOe#cOf#cOg#hOh#cOi#cOj#cOk#cOl#dOm#dOn#dOo#dOp#dOq#cOr#cOs#cOt#cOu#cOv#cOw#cOx#cOy#gOz#gO{#gO|#cO}#cO!O#cO!P#cO!Q#cO!R#hO!S#iO!T#dO!U#dO!V#dO!W#cO!X#cO!Y#cO!Z#cO![#cO!]#RO!^#SO!_#SO!`#SO!a#SO!b#SO!c#TO!e#UO!f#VO!g#WO!h#`O!i#aO#Q#_O#R#_O#p!UO#r!TO#u#jO$g!TO$t#ZO%P#ZO%Q#ZO%S#[O%T#[O%U#[O%W#]O%X#]O%Y#]O'x#PO'y#kO'}#QO(O#QO(P#QO(Q#QO(X#kO(Z#kO~O#usO'xtOU#ta#O#ta(S#ta~O#usO'xtO'{#xO~O#Q#_O#R#_O#p!UO#r!TO#u$OO$W#}O$g!TO$t#ZO%P#ZO%Q#ZO%S#[O%T#[O%U#[O%W#]O%X#]O%Y#]O%c#|O%d#|O%w$QO'x$PO'}#QO(O#QO(P#QO(Q#QO~OR]O!s$^O!v$WO!w$XO!x$YO!y$ZO!{$[O!|$]O#d$_O(SzO(R%]P~P/xO#P$gO#p!UO#r!TO$g!TO~O!k$lO!m$mO!n$nO!q$oO!r$pO#j$kO!s$aP'u$aP~OU$yO#O{O~O#Q#_O#R#_O#p!UO#r!TO#u$OO$W#}O$g!TO$t#ZO%P#ZO%Q#ZO%S#[O%T#[O%U#[O%W#]O%X#]O%Y#]O%c#|O%d#|O%w${O'x$zO'}#QO(O#QO(P#QO(Q#QO~O(R%QO~P3_O(S%UO~OUyO#O{O#p!UO#r!TO#u!VO$g!TO(SzO~P2kOUyO#O{O(SzO~P2kO#u%]O$W%^O'x%_O~O#T%bO$T&oa'u&oa~O!x!aO#P!bO#a!bO#b!bO~O#U%hO~O#U%jO~O#U%lO~O!x!aO~O(S%oO~O!x%rO(R&{P~P3_O#P%zO#p!UO#r!TO$g!TO~OU%|O#c!xO~O#]!wO#_&PO~O'x&VO~O'x&WO~O'x&XO~O'x&YO~O'x&ZO~O'x&[O~O$W&]O'x&^O!}$dX%S$dX%T$dX%U$dX%W$dX%X$dX%Y$dX'{$dX(X$dX(Y$dX(Z$dX(a$dX(b$dX'z$dX$T$dX$V$dX~O!i$dX!j$dX'|$dX([$dX(]$dX(^$dX(_$dX(`$dX~P8xO${&`O$|&aO!}$zX%S$zX%T$zX%U$zX%W$zX%X$zX%Y$zX'{$zX(X$zX(Y$zX(Z$zX(a$zX(b$zX'z$zX$T$zX$V$zX~O!i$zX!j$zX'|$zX([$zX(]$zX(^$zX(_$zX(`$zX~P:pO!h&cO~O'x&dO~O'x&eO~O'x&fO~O$W&gO'x&dO~O$W&gO~O$W&hO'x&iO~O'x&jO~OX#cOY#cOZ#dO[#cO^#eO_#cO`#cOa#fOb#gOc#cOd#cOe#cOf#cOg#hOh#cOi#cOj#cOk#cOl#dOm#dOn#dOo#dOp#dOq#cOr#cOs#cOt#cOu#cOv#cOw#cOx#cOy#gOz#gO{#gO|#cO}#cO!O#cO!P#cO!Q#cO!R#hO!S#iO!T#dO!U#dO!V#dO!W#cO!X#cO!Y#cO!Z#cO![#cO!]#RO!^#SO!_#SO!`#SO!a#SO!b#SO!c#TO!e#UO!f#VO!g#WO!h#`O!i#aO#Q#_O#R#_O#p!UO#r!TO#u#jO$g!TO$t#ZO%P#ZO%Q#ZO%S#[O%T#[O%U#[O%W#]O%X#]O%Y#]O'x#PO'}#QO(O#QO(P#QO(Q#QO~O!}#}X%S#}X%T#}X%U#}X%W#}X%X#}X%Y#}X(X#}X(Z#}X(a#}X(b#}X'z#}X$T#}X$V#}X~O'{&lO(Y&lO!i#}X!j#}X'|#}X([#}X(]#}X(^#}X(_#}X(`#}X~PBwO%S#[O%T#[O%U#[O%W#]O%X#]O%Y#]O!}#|X(a#|X(b#|X'z#|X$T#|X$V#|X~O(X&nO(Z&nO!i#|X!j#|X'|#|X([#|X(]#|X(^#|X(_#|X(`#|X~PDiO!i&sO!j&rO'|&qO([&qO(]&qO(^&qO(_&qO(`&qO!}#zX(a#zX(b#zX'z#zX$T#zX$V#zX~O(a&tO!}#xX(b#xX'z#xX$T#xX$V#xX~O(b&vO!}#wX'z#wX$T#wX$V#wX~O!}&xO~O#usO'xtOU#ti#O#ti(S#ti~O#p$zX#r$zX#u$zX$g$zX'x$zX'y$zX(T$zX(U$zX#Q$zX#R$zX$W$zX$t$zX%P$zX%Q$zX%c$zX%d$zX%w$zX'}$zX(O$zX(P$zX(Q$zX%v$zX!s$zX!v$zX!w$zX!x$zX!y$zX!{$zX!|$zX#d$zX&T$zX(R$zX(S$zX!t$zX~P:pOUyO(SzO~O#p!UO#r!TO#u'XO$g!TO'x'PO'y'OO(T&}O(U'SO~O!s&SP!v&SP!w&SP!x&SP!y&SP!{&SP!|&SP#d&SP&T&SP(R&SP(S&SP~PJvO&T'^O!s%^X!v%^X!w%^X!x%^X!y%^X!{%^X!|%^X#d%^X(R%^X(S%^X~O!u'_O!s&VX!v&VX!w&VX!x&VX!y&VX!{&VX!|&VX#Q&VX#R&VX#d&VX#p&VX#r&VX#u&VX$W&VX$g&VX$t&VX%P&VX%Q&VX%S&VX%T&VX%U&VX%W&VX%X&VX%Y&VX%c&VX%d&VX%w&VX&T&VX'x&VX'}&VX(O&VX(P&VX(Q&VX(R&VX(S&VX~O#p!UO#r!TO#u!VO$g!TO~O!z'eO#p!UO#r!TO#u!VO$g!TO~OX#cOY#cOZ#dO[#cO^#eO_#cO`#cOa#fOb#gOc#cOd#cOe#cOf#cOg#hOh#cOi#cOj#cOk#cOl#dOm#dOn#dOo#dOp#dOq#cOr#cOs#cOt#cOu#cOv#cOw#cOx#cOy#gOz#gO{#gO|#cO}#cO!O#cO!P#cO!Q#cO!R#hO!S#iO!T#dO!U#dO!V#dO!W#cO!X#cO!Y#cO!Z#cO![#cO!]#RO!^#SO!_#SO!`#SO!a#SO!b#SO!c#TO!e#UO!f#VO!g#WO!h#`O!i#aO#p!UO#r!TO$g!TO'x#PO~O'x'iO~O#e'kO~O&T'mO!s'kX!v'kX!w'kX!x'kX!y'kX!{'kX!|'kX#d'kX(R'kX(S'kX~P/xO!s$^O!v$WO!w$XO!x$YO!y$ZO!{$[O!|$]O#d$_O(SzO(R%]X~O(R'pO~O!l'sO~O!l'tO~O!l'xO~O$t'yO~O!r$pO!s$rX'u$rX(R$rX~O!q$oO!s$rX'u$rX(R$rX~O!q$oO!r$pO!s$aX'u$aX(R$aX~O!n$nO~P!)WO!m$mO!n$nO~P!)WO!k$lO!m$mO!n$nO~P!)WO(S(RO~O#p!UO#r!TO#u!VO$g!TO(T(VO~O&T&iP(R&iP!x&iP~P!*^O&T([O(R&gX~O(R(]O~O(R(^O~P3_O(S(dO~O(S(eO~O#u(fO'z(hO~O#T(jO$T&oi'u&oi~O#U(lO~O#U(nO~O#U(pO~O&T(rO!x&jX(R&jX~O&T(uO!x'sX(R'sX~P3_O!x%rO(R&{X~O(R(xO~OU({O#c!xO~OU({O#]!wO#c!xO~O'z)OO~OV)QO'{)PO~P)rOV)RO~P)rOV)TO~P)rOV)YO~P)rO#u)]O~O!}#}a%S#}a%T#}a%U#}a%W#}a%X#}a%Y#}a(X#}a(Z#}a(a#}a(b#}a'z#}a$T#}a$V#}a~O'{&lO(Y&lO!i#}a!j#}a'|#}a([#}a(]#}a(^#}a(_#}a(`#}a~P!.eO!}'nX%S'nX%T'nX%U'nX%W'nX%X'nX%Y'nX(X'nX(Z'nX(a'nX(b'nX'z'nX$T'nX$V'nX~O'{&lO(Y&lO!i'nX!j'nX'|'nX(['nX(]'nX(^'nX(_'nX(`'nX~P!0VO%S#[O%T#[O%U#[O%W#]O%X#]O%Y#]O!}#|a(a#|a(b#|a'z#|a$T#|a$V#|a~O(X&nO(Z&nO!i#|a!j#|a'|#|a([#|a(]#|a(^#|a(_#|a(`#|a~P!1wO'y.mO(X.mO(Z.mO~P=hO!j)jO~O(a&tO!}#xa(b#xa'z#xa$T#xa$V#xa~O(b&vO!}#wa'z#wa$T#wa$V#wa~O#u)oO~O!k$lO!m$mO!n$nO!q$oO!r$pO#j$kO!s$aP~O(R$aP~P!4qO'z)rO~P/xO#p!UO#r!TO$g!TO(T)sO(U)tO~O'x)vO~P!5hO#p!UO#r!TO$g!TO'x'PO'y'OO(T&}O(U'SO~O'{)yO(W)yO(X)yO#Q%kX#R%kX#p%kX#r%kX#u%kX$W%kX$g%kX$t%kX%P%kX%Q%kX%S%kX%T%kX%U%kX%W%kX%X%kX%Y%kX%c%kX%d%kX%w%kX'x%kX'}%kX(O%kX(P%kX(Q%kX(V%kX(Y%kX'z%kX~O#p!UO#r!TO$g!TO'x'PO'y'OO(T&}O~O(Y)|O#Q%iX#R%iX#p%iX#r%iX#u%iX$W%iX$g%iX$t%iX%P%iX%Q%iX%S%iX%T%iX%U%iX%W%iX%X%iX%Y%iX%c%iX%d%iX%w%iX'x%iX'}%iX(O%iX(P%iX(Q%iX(V%iX'z%iX~O(V*OO#Q%hX#R%hX#p%hX#r%hX#u%hX$W%hX$g%hX$t%hX%P%hX%Q%hX%S%hX%T%hX%U%hX%W%hX%X%hX%Y%hX%c%hX%d%hX%w%hX'x%hX'}%hX(O%hX(P%hX(Q%hX'z%hX~O%v*QO~O!s%^a!v%^a!w%^a!x%^a!y%^a!{%^a!|%^a#d%^a(R%^a(S%^a~P/xO!u'_O!s&Va!v&Va!w&Va!x&Va!y&Va!{&Va!|&Va#Q&Va#R&Va#d&Va#p&Va#r&Va#u&Va$W&Va$g&Va$t&Va%P&Va%Q&Va%S&Va%T&Va%U&Va%W&Va%X&Va%Y&Va%c&Va%d&Va%w&Va&T&Va'x&Va'}&Va(O&Va(P&Va(Q&Va(R&Va(S&Va~O$W&]O'x&^O~O#f*^O~O!s'ka!v'ka!w'ka!x'ka!y'ka!{'ka!|'ka#d'ka(R'ka(S'ka~P/xO!s$^O!v$WO!w$XO!x$YO!y$ZO!{$[O!|$]O#d$_O(SzO(R%]a~O#u(fO~OX#cOY#cOZ#dO[#cO^#eO_#cO`#cOa#fOb#gOc#cOd#cOe#cOf#cOg#hOh#cOi#cOj#cOk#cOl#dOm#dOn#dOo#dOp#dOq#cOr#cOs#cOt#cOu#cOv#cOw#cOx#cOy#gOz#gO{#gO|#cO}#cO!O#cO!P#cO!Q#cO!R#hO!S#iO!T#dO!U#dO!V#dO!W#cO!X#cO!Y#cO!Z#cO![#cO!]#RO!^#SO!_#SO!`#SO!a#SO!b#SO!c#TO!e#UO!f#VO!g#WO!h#`O!i#aO#p!UO#r!TO#u*aO$g!TO'x*bO~O!n$ma!q$ma!r$ma!s$ma'u$ma(R$ma~P!!PO!o*fO!p*fO#u*gO~P!!PO$t'yO!r$sa!s$sa'u$sa(R$sa~O$t'yO!q$ua!s$ua'u$ua(R$ua~O!q$oO!r$pO!s$aa'u$aa(R$aa~O!n$nO~P!GdO!m$mO!n$nO~P!GdO(R*nO~P3_O'z*qO~P3_O%v*uO~O(R&ga~P3_O(R*nO~O!t*yO#Q#_O#R#_O#p!UO#r!TO$g!TO$t#ZO%P#ZO%Q#ZO%S#[O%T#[O%U#[O%W#]O%X#]O%Y#]O'}#QO(O#QO(P#QO(Q#QO~O(R*|O~P!HwO$W+OO'x*}O(R+QO~O#u(fO'z+SO~O(S+TO~O(R+YO~O!x&ja(R&ja~P3_O(S+[O~O!x'sa(R'sa~P3_O!x%rO(R&{a~OU+_O#c!xO~O'z+aO~O'{+bO~P)rO$T+cO'z+aO~O$V+eO~O$V+fO~O$V+gO~O$V+hO'z+jO~O'z+lO~O$V+mO~O$V+hO'z+oO~O$V+pO~O!}'na%S'na%T'na%U'na%W'na%X'na%Y'na(X'na(Z'na(a'na(b'na'z'na$T'na$V'na~O'{&lO(Y&lO!i'na!j'na'|'na(['na(]'na(^'na(_'na(`'na~P!MZO'{.nO(Y.nO~PBwO(X.oO(Z.oO~PDiO'z+uO~O!s!]O(R$vP~O#p!UO#r!TO$g!TO(T+wO~O'z+xO~P!5hO'z+zO~O(Y)|O#Q%ia#R%ia#p%ia#r%ia#u%ia$W%ia$g%ia$t%ia%P%ia%Q%ia%S%ia%T%ia%U%ia%W%ia%X%ia%Y%ia%c%ia%d%ia%w%ia'x%ia'}%ia(O%ia(P%ia(Q%ia(V%ia'z%ia~O(V*OO#Q%ha#R%ha#p%ha#r%ha#u%ha$W%ha$g%ha$t%ha%P%ha%Q%ha%S%ha%T%ha%U%ha%W%ha%X%ha%Y%ha%c%ha%d%ha%w%ha'x%ha'}%ha(O%ha(P%ha(Q%ha'z%ha~O$V,PO$T%qX%v%qX!s%qX!v%qX!w%qX!x%qX!y%qX!{%qX!|%qX#d%qX&T%qX(R%qX(S%qX~O$T,RO%v%ea!s%ea!v%ea!w%ea!x%ea!y%ea!{%ea!|%ea#d%ea&T%ea(R%ea(S%ea~O!},UO~O'x,VO~O#`,WO#u(fO~O!m$ji!n$ji!q$ji!r$ji!s$ji'u$ji(R$ji~P!AkO!o*fO!p*fO#u*gO!q$pi!r$pi!s$pi'u$pi(R$pi~P!!PO!q$oO!r$pO!s$ai'u$ai(R$ai~O!n$nO~P#)VO(R,aO~O$T,bO%v&Pa&T&Pa(R&Pa!x&Pa~O$V,dO$T%yX%v%yX&T%yX(R%yX!x%yX!s%yX!v%yX!w%yX!y%yX!{%yX!|%yX#d%yX(S%yX~O(R,gO~P!HwO'z,iO~P!HwO$W+OO'x*}O(R,kO~O(S,lO~O(R,nO~P3_OU,qO#c!xO~O'z,rO~O!d,sO~O$T,tO'z,rO~O$V+hO'z,zO~O$V+hO'z,}O~O'{.nO(Y.nO~P!.eO'{.nO(Y.nO~P!0VO(X.oO(Z.oO~P!1wO'z-SO(V-QO~O$V,PO$T%qa%v%qa!s%qa!v%qa!w%qa!x%qa!y%qa!{%qa!|%qa#d%qa&T%qa(R%qa(S%qa~O$T'gX%v'gX!s'gX!v'gX!w'gX!x'gX!y'gX!{'gX!|'gX#d'gX&T'gX(R'gX(S'gX~PJvO$T,RO%v%ei!s%ei!v%ei!w%ei!x%ei!y%ei!{%ei!|%ei#d%ei&T%ei(R%ei(S%ei~O#u-XO~O!}-[O~O!}-_O'z-^O~O!q$oO!r$pO!s$aq'u$aq(R$aq~O$T'iX%v'iX&T'iX(R'iX!x'iX~P!*^O$T,bO%v&Pi&T&Pi(R&Pi!x&Pi~O$V,dO$T%ya%v%ya&T%ya(R%ya!x%ya!s%ya!v%ya!w%ya!y%ya!{%ya!|%ya#d%ya(S%ya~O'z-fO~P!HwO$W+OO'x*}O(R-hO~O(R-iO~O'|-kO~O!d-lO~O$V-nO'z-mO~O$V-oO~O$V-qO'z-pO~O$V+hO'z-rO~O'z-sO~O$V-tO~O'{.nO(Y.nO~P!MZO'z-wO(V-QO~O'z-yO~O#u(fO'z-zO~O#u-{O~O#u-|O~O$W+OO'x*}O(R.OO~O'|.QO~O'x.VO~O'z.WO~O'z.XO~O'z.ZO~O$V.]O'z.[O~O'z.^O~O'z._O~O'z.aO~O#u(fO'z.cO~O'z.dO~O#g.eO#h.fO~O$t.gO~O%P.gO~O#i.hO~O!}.jO~O#u.kO~O$g#r%c'U%Y%X%W(T'w#u(W%U%T%S%Q%P$t(Z%U(X&T(X~",
  goto: "!.s'uPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'v'y(PP(PP(U(XP(_*X*y+n,d-W-}.r/m0j1g2l3rP4tPP6e3r3r3r3r6n8P8S8p9h9x9{:y>aPAPAWAZAn3gArBZB_BjCWC[DOPDmE[EbEhElErPPErG_PPHvPPPHvPPPErEh8PJgJsJyKkLVPPLqLzMSM]MdMnMyNVNaNdNmLzNpNsNy! R! _PP! _! i! r! z!!U!!j!!j!!|!#V!#_!#uP!#x!$O!$O!$O!$O!$O!$O!$O!$O!$O3r!$U!$c!$f!$c(U!$l!$o!$u!%T!%W(U(U!%n!%t!%x!%|!%x!&`!%x!%x!&l!%x!%x!%x!%x!'b!'h!'n!%x!%x!'u!%x!(Q!(X!(fP!(r!(x!)P!)Z!)i!){!*R!*X!*_!*i!*s!+R!+X!+_!+e!+k!+q!+w!+}!,T!,Z!,e!,k!,}!-X!-_!-e!-|!.S!._RVOQUOR&S#OVSOT#ORbUQ^UR#{zQ#utQ&U#PS)P&V&WQ)S&XQ)U&YQ)V&ZQ)W&[Q)X&^Q)]&dQ)^&eQ)_&iQ)`&jQ*]'iS+b)Q)RQ+d)TQ+k)YQ,Y*bQ,u+eQ,v+fQ,w+gQ,x+hQ,|+mQ-O+pQ.R-nQ.S-oQ.T-qQ.U-tR.b.]!_#tt#P&V&W&X&Y&Z&[&^&d&e&i&j'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.]!^#st#P&V&W&X&Y&Z&[&^&d&e&i&j'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.]R)m&v!`#rt#P&V&W&X&Y&Z&[&^&d&e&i&j&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.]R)k&t!c#qt#P&V&W&X&Y&Z&[&^&d&e&i&j&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.]!b#pt#P&V&W&X&Y&Z&[&^&d&e&i&j&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.]R)i&q!e#ot#P&V&W&X&Y&Z&[&^&d&e&i&j&q&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.]!b#nt#P&V&W&X&Y&Z&[&^&d&e&i&j&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.]S)c&n.oR)h&q!d#mt#P&V&W&X&Y&Z&[&^&d&e&i&j&n&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.]S)a&l.nT)g&q.o!l#lt#P&V&W&X&Y&Z&[&^&d&e&i&j&l&n&q&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.].n.oT&k#k.m!p#jt#P#k&V&W&X&Y&Z&[&^&d&e&i&j&l&n&q&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.].m.n.oY'g$[$m'w'x*iR,[*f!p#jt#P#k&V&W&X&Y&Z&[&^&d&e&i&j&l&n&q&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.].m.n.oY'g$[$m'w'x*iT*a't*d#P#bt#P#k$[$m&V&W&X&Y&Z&[&^&d&e&i&j&l&n&q&t&v'i't'w'x)Q)R)T)Y*b*d*i+e+f+g+h+m+p-n-o-q-t.].m.n.o!h#Yt#P#k&V&W&X&Y&Z&[&^&d&e&i&j&l&n&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.]!b#zz!Q!r$P$a$z%U%o%s&q&{'Z'^'m(R(T(W([(d(r(u*{*}+[,P,d,h-V-b.m.n.oQ.P-kR.Y.QQ&g#hQ)i&rR+t)jdx^a}!R!X!Y!Z#{%S%VQ#yyW$Vz$b$c'oQ%}!{Q&b#`Q'a$WQ'b$XQ(z%|Q)[&cQ*V'_Q*X'cQ*Y'dQ+^({Q,T*ZQ,p+_Q-j,qR.l.kR$dzQ!O^Q![aQ$j}Q%T!RS%Y!X!YQ%Z!ZQ&y#{Q(^%SR(b%VQ$x!OS%X!X!YQ%[![Q'r$jQ(_%TS(a%V%YQ(c%ZQ)p&yQ*w(^Q*x(bQ,`*nR-a,am$w!O!X!Y![$j%T%V%Y%Z&y(^(b*n,aR,X*`!p#jt#P#k&V&W&X&Y&Z&[&^&d&e&i&j&l&n&q&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.].m.n.oR-Z,Wd!V`!X$Y$Z${$}%O%r'e,bQ!_ch!gfgh!j!l!n%h%j%l(l(n(pQ!}n!h#Xt#P#k&V&W&X&Y&Z&[&^&d&e&i&j&l&n&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.]!Q#}z!Q!r$P$a$z%U%o%s&{'Z'^'m(R(T(W([(r(u+[,P,d-V-bS$e{$gQ%c!`Q%d!aQ%g!hQ%y!x`&}$Q$S$T'P'S)|*O,R^'f$[$m't'w'x*d*iQ(y%zQ)Z&aY)f&q,W.m.n.oU)s'O)v-QW*y(d*{*},hQ+w)tR.i.h&Z!U`cfghntz{!Q!X!`!a!h!j!l!n!r!x#P#k$P$Q$S$T$Y$Z$[$a$g$m$z${$}%O%U%h%j%l%o%r%s%z&V&W&X&Y&Z&[&^&a&d&e&i&j&l&n&q&t&v&{'O'P'S'Z'^'e'i'm't'w'x(R(T(W([(d(l(n(p(r(u)Q)R)T)Y)t)v)|*O*b*d*i*{*}+[+e+f+g+h+m+p,P,R,W,b,d,h-Q-V-b-n-o-q-t.].h.m.n.oS&_#X)fR*['fR-],Xl$v!O!X!Y![$j%T%V%Y%Z&y(^(b*n,aR(Q$wT*c't*dl$u!O!X!Y![$j%T%V%Y%Z&y(^(b*n,aS(P$v$wR*m(QT'v$m'wQ'h$[S'u$m'wT*g'x*il$t!O!X!Y![$j%T%V%Y%Z&y(^(b*n,aU(O$u$v$wS*l(P(QR,_*mT*h'x*il$s!O!X!Y![$j%T%V%Y%Z&y(^(b*n,aW'}$t$u$v$wU*k(O(P(QS,^*l*mR-`,_!Q$q!O!X!Y![$j$t$u$v$w%T%V%Y%Z&y(O(P(Q(^(b*l*m*n,_,aR'|$r!Q$r!O!X!Y![$j$t$u$v$w%T%V%Y%Z&y(O(P(Q(^(b*l*m*n,_,aR'|$qQ!^bR+v)pQ%a!]R'j$^T%`!]$^X*z(d*{*},h!p#jt#P#k&V&W&X&Y&Z&[&^&d&e&i&j&l&n&q&t&v'i)Q)R)T)Y*b+e+f+g+h+m+p-n-o-q-t.].m.n.o!Q#}z!Q!r$P$a$z%U%o%s&{'Z'^'m(R(T(W([(r(u+[,P,d-V-bX*y(d*{*},h#{#^tz!Q!r#P#k$P$a$z%U%o%s&V&W&X&Y&Z&[&^&d&e&i&j&l&n&q&t&v&{'Z'^'i'm(R(T(W([(d(r(u)Q)R)T)Y*b*{*}+[+e+f+g+h+m+p,P,d,h-V-b-n-o-q-t.].m.n.o#z#^tz!Q!r#P#k$P$a$z%U%o%s&V&W&X&Y&Z&[&^&d&e&i&j&l&n&q&t&v&{'Z'^'i'm(R(T(W([(d(r(u)Q)R)T)Y*b*{*}+[+e+f+g+h+m+p,P,d,h-V-b-n-o-q-t.].m.n.oS&o#n&pT+r)h+sQ$czQ'l$aQ*U'^R*_'mX$Uz$a'^'mW$Sz$a'^'md$}!Q!r%U%o%s(R([(r(u+[W&|$P&{'Z,P](U$z(T(W,d-V-b!R$Oz!Q!r$P$a$z%U%o%s&{'Z'^'m(R(T(W([(r(u+[,P,d-V-b!R#}z!Q!r$P$a$z%U%o%s&{'Z'^'m(R(T(W([(r(u+[,P,d-V-bQ'Y$QQ'[$SR']$TU'Z$Q$S$TR-V,RW'W$Q$S$T,RR)x'PZ'V$Q$S$T'P,RY'U$Q$S$T'P,RR+}*O['T$Q$S$T'P*O,RR+{)|^'R$Q$S$T'P)|*O,RR){'Sa'Q$Q$S$T'P'S)|*O,RR)w'OQ)u'OQ+y)vR-u-QR)z'QR*T'ZQ*S'ZR-T,PS&z$P&{T*R'Z,PW$Tz$a'^'mX&|$P&{'Z,Pa$Rz$P$a&{'Z'^'m,PQ*r(WQ-x-VR-}-bU*t(W-V-bR-d,dS(S$z(TX*s(W,d-V-bd%O!Q!r%U%o%s(R([(r(u+[](U$z(T(W,d-V-bq$|!Q!r$z%U%o%s(R(T(W([(r(u+[,d-V-bQ(X${Q(Y$}R(Z%OU(W${$}%OR-b,bS!W`!XQ'c$YQ'd$ZW(V${$}%O,bQ(s%rR*Z'eR'[$TX$az$b$c'oX$`z$b$c'og|^_a}!P!R!X!Y!Z%S%VR$h{Q$f{R'q$gR!R_Q%R!QR*v([S%P!Q([a%q!r%U%o%s(R(r(u+[R(Y%OS%u!r%oQ(`%UQ(t%sQ*o(RQ+Z(rQ+](uR,o+[QVOR&T#OTpU&SToU&SW!bde!d!fQ!oiQ%n!pQ(i%bR+U(jQ!cdQ!eeQ%e!dR%f!fQ!ifQ!kgQ!mhQ%i!jQ%k!lQ%m!nQ(k%hQ(m%jQ(o%lQ+V(lQ+W(nR+X(pQ%p!qR%w!tQ%v!rR(q%oZ%s!r%o%t%u(wS!sj!wS!vk&PR%x!uSlU&SR&Q!}SmU&SQ!|lQ&R!}R(}&Qe!ylm!z!|&O&Q&R(|(}+`QXPRqXSTO#OR[TQu]S#vu#wR#wwQ+i)XQ+n)_U,y+i+n,{R,{+kQ(g%_Q*`'sW+R(g*`-Y.`Q-Y,VR.`.VQ*d'tR,Z*dQ'w$mR*e'wQ*i'xR,]*iQ'z$oQ'{$pT*j'z'{Q*{(dS,f*{,hR,h*}Q+P(eU,j+P,m-gQ,m+TR-g,lQ-R+yR-v-RQ)}'TR+|)}Q*P'UR,O*PQ&{$PR)q&{Q,Q*SR-U,QQ,S*TR-W,SQ(T$zR*p(TQ,c*rR-c,cQ,e*tR-e,eQ$bzS'n$b'oR'o$cQ'`$VR*W'`Q&m#mW)b&m)d+q-PQ)d&oQ+q)gR-P+rQ&p#nS)e&p+sR+s)hQ&u#rR)l&uQ&w#sR)n&wQ}^Q!P_Q!ZaY$i}!P!Z%S%VQ%S!RT%V!X!YQ!X`R%W!XS%t!r%oS(v%t(wR(w%uS!zlmW%{!z&O(|+`Q&O!|S(|&Q&RR+`(}",
  nodeNames: "⚠ BASE PREFIX SELECT CONSTRUCT DESCRIBE WHERE DISTINCT REDUCED STR LANG LANGMATCHES DATATYPE ASK BOUND IRI URI BNODE RAND ABS CEIL FLOOR ROUND CONCAT STRLEN UCASE LCASE ENCODE_FOR_URI CONTAINS STRSTARTS STRENDS STRBEFORE STRAFTER YEAR MONTH DAY HOURS MINUTES SECONDS TIMEZONE TZ NOW UUID STRUUID MD5 SHA1 SHA256 SHA384 SHA512 COALESCE IF STRLANG STRDT SAMETERM ISIRI ISURI ISBLANK ISLITERAL ISNUMERIC COUNT SUM MIN MAX AVG SAMPLE GROUP_CONCAT SEPARATOR SUBSTR REPLACE REGEX EXISTS NOT IN GROUP BY HAVING ORDER ASC DESC LIMIT OFFSET VALUES UNDEF UNION OPTIONAL MINUS GRAPH SERVICE SILENT FILTER BIND AS FROM NAMED TRUE FALSE LOAD INTO TO CLEAR DROP CREATE ADD MOVE COPY INSERT DATA DELETE WITH DEFAULT ALL USING SIMILARITY JOIN ON TOP WITHIN DISTANCE CLUSTER Comment Unit Query Prologue BaseDecl IriRef PrefixDecl Pname_ns SelectQuery SelectClause Var Expression ConditionalOrExpression ConditionalAndExpression ValueLogical RelationalExpression NumericExpression AdditiveExpression MultiplicativeExpression UnaryExpression PrimaryExpression BrackettedExpression BuiltInCall Aggregate ; String , Nil ExpressionList SubstringExpression StrReplaceExpression RegexExpression ExistsFunc GroupGraphPattern SubSelect WhereClause SolutionModifier ClusterByClause WithClause IriOrFunction Iri PrefixedName Pname_ln ArgList ClusterAlias GroupClause GroupCondition FunctionCall HavingClause HavingCondition Constraint OrderClause OrderCondition LimitOffsetClauses LimitClause Integer OffsetClause ValuesClause DataBlock InlineDataOneVar DataBlockValue RDFLiteral Langtag ^^ NumericLiteral NumericLiteralUnsigned Decimal Double NumericLiteralPositive IntegerPositive DecimalPositive DoublePositive NumericLiteralNegative IntegerNegative DecimalNegative DoubleNegative BooleanLiteral InlineDataFull GroupGraphPatternSub TriplesBlock TriplesSameSubjectPath VarOrTerm GraphTerm BlankNode Blank_node_label Anon PropertyListPathNotEmpty VerbPath Path PathAlternative PathSequence PathEltOrInverse PathElt PathPrimary PathNegatedPropertySet PathOneInPropertySet PathMod VerbSimple ObjectListPath ObjectPath GraphNodePath TriplesNodePath CollectionPath ] [ BlankNodePropertyListPath ObjectList Object GraphNode TriplesNode Collection BlankNodePropertyList PropertyListNotEmpty Verb VarOrIri PropertyListPath . GraphPatternNotTriples GroupOrUnionGraphPattern OptionalGraphPattern MinusGraphPattern GraphGraphPattern ServiceGraphPattern Filter Bind InlineData SimJoinPattern NotExistsFunc DatasetClause DefaultGraphClause SourceSelector NamedGraphClause ConstructQuery ConstructTemplate ConstructTriples TriplesSameSubject PropertyList TriplesTemplate DescribeQuery AskQuery Update Update1 Load GraphRef Clear GraphRefAll Drop Add GraphOrDefault Move Copy Create InsertData QuadData Quads QuadsNotTriples DeleteData DeleteWhere QuadPattern Modify DeleteClause InsertClause UsingClause Keyword",
  maxTerm: 340,
  nodeProps: [
    ["openedBy", 222,"["],
    ["closedBy", 223,"]"]
  ],
  propSources: [highlight],
  skippedNodes: [0,119,282,283],
  repeatNodeCount: 30,
  tokenData: "!0m~R!]X^$zpq$zqr%ors%|st.htu0dvw3Pwx3[xy;vyz<sz{<x{|<}|}>w}!O>|!O!P@v!P!QAx!Q![A}![!]Bl!]!^I]!^!_Ib!_!`LR!`!aLW!a!bLe!b!cMl!c!}Nr!}#O!&Q#P#Q!&}#Q#R!'S#R#S!'a#T#U!+|#U#oNr#o#p!-x#p#q!-}#q#r!.[#y#z$z$f$g$z$g%W!%o%W%oNr%o%p!%o%p&aNr&a&b!%o&b&jNr&j1p!!l4U4d!!l4e#BY!!l#BY#BZ!.a#BZ$IS!!l$IS$I_$z$I`$Ib!!l$I|$JO$z$JT$JU$z$KV$KW$z$Kh%#t!!l&/x&Et!!l&FU&FV$z&FV;'S!!l;'S;:j!%i?&r?Ah!!l?BY?Mn!!l~%PY'w~X^$zpq$z#y#z$z$f$g$z#BY#BZ$z$IS$I_$z$I|$JO$z$JT$JU$z$KV$KW$z&FU&FV$zR%tP'yP!_!`%wQ%|O([Q~&PXOY&lZ]&l^r&lrs)ms#O&l#O#P'a#P;'S&l;'S;=`)g<%lO&l~&oXOY&lZ]&l^r&lrs'[s#O&l#O#P'a#P;'S&l;'S;=`)g<%lO&l~'aO(O~~'deOY&lZ]&l^r&lrs(usw&lwx&lx#O&l#O#P'a#P#U&l#U#V&l#V#Y&l#Y#Z&l#Z#b&l#b#c&l#c#f&l#f#g&l#g#h&l#h#i&l#i;'S&l;'S;=`)g<%lO&l~(zX(O~OY&lZ]&l^r&lrs'[s#O&l#O#P'a#P;'S&l;'S;=`)g<%lO&l~)jP;=`<%l&l~)rP(O~rs)u~)xVOr)urs*_s#O)u#O#P+f#P;'S)u;'S;=`.b<%lO)u~*bVOr)urs*ws#O)u#O#P+f#P;'S)u;'S;=`.b<%lO)u~*zVOr)urs+as#O)u#O#P+f#P;'S)u;'S;=`.b<%lO)u~+fO(Q~~+icOr)urs,tsw)uwx)ux#O)u#O#P+f#P#U)u#U#V)u#V#Y)u#Y#Z)u#Z#b)u#b#c)u#c#f)u#f#g)u#g#h)u#h#i)u#i;'S)u;'S;=`.b<%lO)u~,wVOr)urs-^s#O)u#O#P+f#P;'S)u;'S;=`.b<%lO)u~-aVOr)urs-vs#O)u#O#P+f#P;'S)u;'S;=`.b<%lO)u~-{V(Q~Or)urs+as#O)u#O#P+f#P;'S)u;'S;=`.b<%lO)u~.eP;=`<%l)u~.mV#k~OY.hYZ/SZs.hst.ht;'S.h;'S;=`0^<%lO.h~/XP#k~st/[~/_VOY/tYZ/SZs/tst/[t;'S/t;'S;=`0W<%lO/t~/wTOY/tYZ/SZ;'S/t;'S;=`0W<%lO/t~0ZP;=`<%l/t~0aP;=`<%l.h~0g`!Q![1i!c!}1i#R#S1i#T#o1i%W%o1i%p&a1i&b1p1i4U4d1i4e$IS1i$I`$Ib1i$Kh%#t1i&/x&Et1i&FV;'S1i;'S;:j2y?&r?Ah1i?BY?Mn1i~1nc#u~!Q![1i!c!}1i#R#S1i#T#o1i$}%O1i%W%o1i%p&a1i&b1p1i1p4U1i4U4d1i4e$IS1i$I`$Ib1i$Je$Jg1i$Kh%#t1i&/x&Et1i&FV;'S1i;'S;:j2y?&r?Ah1i?BY?Mn1i~2|P;=`<%l1i~3SPvw3V~3[O(a~~3_XOY3zZ]3z^w3zwx6{x#O3z#O#P4o#P;'S3z;'S;=`6u<%lO3z~3}XOY3zZ]3z^w3zwx4jx#O3z#O#P4o#P;'S3z;'S;=`6u<%lO3z~4oO'}~~4reOY3zZ]3z^r3zrs3zsw3zwx6Tx#O3z#O#P4o#P#U3z#U#V3z#V#Y3z#Y#Z3z#Z#b3z#b#c3z#c#f3z#f#g3z#g#h3z#h#i3z#i;'S3z;'S;=`6u<%lO3z~6YX'}~OY3zZ]3z^w3zwx4jx#O3z#O#P4o#P;'S3z;'S;=`6u<%lO3z~6xP;=`<%l3z~7QP'}~wx7T~7WVOw7Twx7mx#O7T#O#P8t#P;'S7T;'S;=`;p<%lO7T~7pVOw7Twx8Vx#O7T#O#P8t#P;'S7T;'S;=`;p<%lO7T~8YVOw7Twx8ox#O7T#O#P8t#P;'S7T;'S;=`;p<%lO7T~8tO(P~~8wcOr7Trs7Tsw7Twx:Sx#O7T#O#P8t#P#U7T#U#V7T#V#Y7T#Y#Z7T#Z#b7T#b#c7T#c#f7T#f#g7T#g#h7T#h#i7T#i;'S7T;'S;=`;p<%lO7T~:VVOw7Twx:lx#O7T#O#P8t#P;'S7T;'S;=`;p<%lO7T~:oVOw7Twx;Ux#O7T#O#P8t#P;'S7T;'S;=`;p<%lO7T~;ZV(P~Ow7Twx8ox#O7T#O#P8t#P;'S7T;'S;=`;p<%lO7T~;sP;=`<%l7T~;{T'x~XY<[YZ<[]^<[pq<[yz<n~<_TXY<[YZ<[]^<[pq<[yz<n~<sO$W~~<xO'z~~<}O'{~~=SQ(X~!O!P=Y!Q![>Y~=]P!Q![=`~=eR%T~!Q![=`!g!h=n#X#Y=n~=qR{|=z}!O=z!Q![>Q~=}P!Q![>Q~>VP%U~!Q![>Q~>_S%S~!O!P>k!Q![>Y!g!h=n#X#Y=n~>nR!Q![=`!g!h=n#X#Y=n~>|O$V~~?RQ(Z~!O!P?X!Q![@X~?[P!Q![?_~?dR%X~!Q![?_!g!h?m#X#Y?m~?pR{|?y}!O?y!Q![@P~?|P!Q![@P~@UP%Y~!Q![@P~@^S%W~!O!P@j!Q![@X!g!h?m#X#Y?m~@mR!Q![?_!g!h?m#X#Y?m~@{P&T~!Q![AO~ATR%P~!Q![AO!g!hA^#X#YA^~AaR{|Aj}!OAj!Q![Ap~AmP!Q![Ap~AuP%Q~!Q![Ap~A}O(Y~~BSS$t~!O!PB`!Q![A}!g!hA^#X#YA^~BcR!Q![AO!g!hA^#X#YA^~Bqc#r~uvC|!Q![Df![!]Df!c!}Df#O#PGt#R#SDf#T#oDf%W%oDf%p&aDf&b1pDf4U4dDf4e$ISDf$I`$IbDf$Kh%#tDf&/x&EtDf&FV;'SDf;'S;:jIV?&r?AhDf?BY?MnDf~DPR!Q![DY!c!iDY#T#ZDY~D]R!Q![Df!c!iDf#T#ZDf~Dkh$g~uvC|}!ODf!O!PFV!Q![Df![!]Df!c!}Df#O#PGt#R#SDf#T#oDf$}%ODf%W%oDf%p&aDf&b1pDf1p4UDf4U4dDf4e$ISDf$I`$IbDf$Je$JgDf$Kh%#tDf&/x&EtDf&FV;'SDf;'S;:jIV?&r?AhDf?BY?MnDf~FYhuvC|}!ODf!O!PFV!Q![Df![!]Df!c!}Df#O#PGt#R#SDf#T#oDf$}%ODf%W%oDf%p&aDf&b1pDf1p4UDf4U4dDf4e$ISDf$I`$IbDf$Je$JgDf$Kh%#tDf&/x&EtDf&FV;'SDf;'S;:jIV?&r?AhDf?BY?MnDf~GwdqrDfstDftuDfuvDfvwDfwxDfxyDfyzDfz{Df{|Df|}Df}!ODf!O!PDf!P!QDf!]!^Df!_!`Df!a!bDf!b!cDf#R#SDf#r#sDf~IYP;=`<%lDf~IbO$T~VIgZ(]QqrJYs!^JY!_!`KZ!`!aKO!a#OJY#P#QJY#R#SJY#T#oJY#r;'SJY;'S;=`KT<%lOJYTJ]ZqrJYs!^JY!_!`JY!`!aKO!a#OJY#P#QJY#R#SJY#T#oJY#r;'SJY;'S;=`KT<%lOJYTKTO#pTTKWP;=`<%lJYVK`Z(_QqrJYs!^JY!_!`JY!`!aKO!a#OJY#P#QJY#R#SJY#T#oJY#r;'SJY;'S;=`KT<%lOJY~LWO'|~~L]P(^~!_!`L`~LeO(`~~Lj`(W~!Q![1i!c!}1i#R#S1i#T#o1i%W%o1i%p&a1i&b1p1i4U4d1i4e$IS1i$I`$Ib1i$Kh%#t1i&/x&Et1i&FV;'S1i;'S;:j2y?&r?Ah1i?BY?Mn1i~MoQ!c!}Mu#T#oMu~MzR${~}!ONT!c!}Mu#T#oMu~NWR!Q![Na!c!}Na#T#oNa~NfS${~}!ONT!Q![Na!c!}Na#T#oNa~Nwk'U~}!O!!l!O!P!$T!Q![!!l![!]Bl!c!}Nr#R#SNr#T#oNr$g$}!%o$}%ONr%O%W!%o%W%oNr%o%p!%o%p&aNr&a&b!%o&b&jNr&j1p!!l1p4U!!l4U4d!!l4e$IS!!l$I`$Ib!!l$Je$Jg!!l$Kh%#t!!l&/x&Et!!l&FV;'S!!l;'S;:j!%i?&r?Ah!!l?BY?Mn!!l~!!of}!O!!l!O!P!$T!Q![!!l![!]Bl!c!}!!l#R#S!!l#T#o!!l$}%O!!l%W%o!!l%p&a!!l&b1p!!l1p4U!!l4U4d!!l4e$IS!!l$I`$Ib!!l$Je$Jg!!l$Kh%#t!!l&/x&Et!!l&FV;'S!!l;'S;:j!%i?&r?Ah!!l?BY?Mn!!l~!$We}!O!!l!O!P!$T!Q![!!l!c!}!!l#R#S!!l#T#o!!l$}%O!!l%W%o!!l%p&a!!l&b1p!!l1p4U!!l4U4d!!l4e$IS!!l$I`$Ib!!l$Je$Jg!!l$Kh%#t!!l&/x&Et!!l&FV;'S!!l;'S;:j!%i?&r?Ah!!l?BY?Mn!!l~!%lP;=`<%l!!l~!%tS'U~!c!}!%o#R#S!%o#T#o!%o$g&j!%o~!&VT%w~XY!&fYZ!&f]^!&fpq!&f#P#Q!&x~!&iTXY!&fYZ!&f]^!&fpq!&f#P#Q!&x~!&}O%d~~!'SO%v~~!'XP(U~#Q#R!'[~!'aO$|~~!'fT'U~![!]!'u!c!}!%o#R#S!%o#T#o!%o$g&j!%o~!'x`!Q![!(z!c!}!(z#R#S!(z#T#o!(z%W%o!(z%p&a!(z&b1p!(z4U4d!(z4e$IS!(z$I`$Ib!(z$Kh%#t!(z&/x&Et!(z&FV;'S!(z;'S;:j!+v?&r?Ah!(z?BY?Mn!(z~!)Pe%c~}!O!(z!O!P!*b!Q![!(z!c!}!(z#R#S!(z#T#o!(z$}%O!(z%W%o!(z%p&a!(z&b1p!(z1p4U!(z4U4d!(z4e$IS!(z$I`$Ib!(z$Je$Jg!(z$Kh%#t!(z&/x&Et!(z&FV;'S!(z;'S;:j!+v?&r?Ah!(z?BY?Mn!(z~!*ee}!O!(z!O!P!*b!Q![!(z!c!}!(z#R#S!(z#T#o!(z$}%O!(z%W%o!(z%p&a!(z&b1p!(z1p4U!(z4U4d!(z4e$IS!(z$I`$Ib!(z$Je$Jg!(z$Kh%#t!(z&/x&Et!(z&FV;'S!(z;'S;:j!+v?&r?Ah!(z?BY?Mn!(z~!+yP;=`<%l!(z~!,Tk'U~(T~}!O!!l!O!P!$T!Q![!!l![!]Bl!c!}Nr#R#SNr#T#oNr$g$}!%o$}%ONr%O%W!%o%W%oNr%o%p!%o%p&aNr&a&b!%o&b&jNr&j1p!!l1p4U!!l4U4d!!l4e$IS!!l$I`$Ib!!l$Je$Jg!!l$Kh%#t!!l&/x&Et!!l&FV;'S!!l;'S;:j!%i?&r?Ah!!l?BY?Mn!!l~!-}O(S~V!.SP(VS#p#q!.VR!.[O(bR~!.aO(R~~!.fq'w~X^$zpq$z}!O!!l!O!P!$T!Q![!!l![!]Bl!c!}!!l#R#S!!l#T#o!!l#y#z$z$f$g$z$}%O!!l%W%o!!l%p&a!!l&b1p!!l1p4U!!l4U4d!!l4e#BY!!l#BY#BZ!.a#BZ$IS!!l$IS$I_$z$I`$Ib!!l$I|$JO$z$JT$JU$z$Je$Jg!!l$KV$KW$z$Kh%#t!!l&/x&Et!!l&FU&FV$z&FV;'S!!l;'S;:j!%i?&r?Ah!!l?BY?Mn!!l",
  tokenizers: [0, 1, 2],
  topRules: {"Unit":[0,120]},
  specialized: [{term: 282, get: (value, stack) => (caseInsensitive(value) << 1), external: caseInsensitive}],
  tokenPrec: 5275
});

const SparqlLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            styleTags({
                Comment: tags.comment,
                "BASE PREFIX SELECT CONSTRUCT DESCRIBE WHERE DISTINCT REDUCED STR LANG LANGMATCHES DATATYPE ASK BOUND IRI URI BNODE RAND ABS CEIL FLOOR ROUND CONCAT STRLEN UCASE LCASE ENCODE_FOR_URI CONTAINS STRSTARTS STRENDS STRBEFORE STRAFTER YEAR MONTH DAY HOURS MINUTES SECONDS TIMEZONE TZ NOW UUID STRUUID MD5 SHA1 SHA256 SHA384 SHA512 COALESCE IF STRLANG STRDT SAMETERM ISIRI ISURI ISBLANK ISLITERAL ISNUMERIC COUNT SUM MIN MAX AVG SAMPLE GROUP_CONCAT SEPARATOR SUBSTR REPLACE REGEX EXISTS NOT IN GROUP BY HAVING ORDER ASC DESC LIMIT OFFSET VALUES UNDEF UNION OPTIONAL MINUS GRAPH SERVICE SILENT FILTER BIND AS FROM NAMED LOAD INTO TO CLEAR DROP CREATE ADD MOVE COPY INSERT DATA DELETE WITH DEFAULT ALL USING SIMILARITY JOIN ON TOP WITHIN DISTANCE CLUSTER": tags.keyword,
                "Var ObjectListPath/..": tags.variableName,
                String: tags.string,
                Integer: tags.integer,
                "Double Decimal": tags.float,
                "{ }": tags.brace,
                Langstag: tags.annotation,
                "TRUE FALSE": tags.bool,
                "VerbPath Namespace IriRef": tags.namespace,
                "Iri": tags.url,
                "RDFLiteral/Iri": tags.typeName,
            }),
            foldNodeProp.add({
                GroupGraphPattern: foldInside,
                QuadData: foldInside,
                Prologue(tree) { return { from: tree.from + 7, to: tree.to - 0 }; }
            }),
        ]
    }),
});
function sparql() {
    return new LanguageSupport(SparqlLanguage);
}

export { SparqlLanguage, sparql };
